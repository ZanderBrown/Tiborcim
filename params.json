{
  "name": "Tiborcim",
  "tagline": "BASIC for the Micro:Bit",
  "body": "![Logo](cim.png \"Tiborcim Logo\")\r\n\r\n# Tiborcim\r\n[![Build Status](https://travis-ci.org/ZanderBrown/Tiborcim.svg?branch=master)](https://travis-ci.org/ZanderBrown/Tiborcim)\r\n\r\nBASIC for the Micro:Bit\r\n\r\nThe plan is to a create a source to source (or trans-)complier to take Tiborcim a custom language with syntax as close to BBC BASIC as possible and generate MicroPython code for the BBC Micro:Bit\r\n\r\nTargeted and tested on Python 3.5\r\n\r\n## Install\r\n\r\nTiborcim is packaged with python setup tools and can be installed with the command `python setup.py install` \r\n\r\n## tibc\r\nOnly accessable when Tiborcim is installed\r\n\r\nThe 'compiler'. Why the name? cc, vbc, valac, tsc... sort of set a trend and tiborcimc was a bit long.\r\n\r\n### Usage\r\n`tibc [-h] [-p] [source] [target]`\r\n\r\nwhere -h prints help, -p for flashing a file that is already python, source being the file name and source being the location of your Micro:Bit (only needed if it's not found)\r\n\r\n## Cim\r\nA simple editor for Tiborcim\r\n\r\nWhen Tiborcim is installed Cim can be accesed with the command `cim` or linux user can find it in the applications menu\r\n\r\nIf you have choosen not to install Tiborcim you can still access Cim by executing `run.py`\r\n\r\n### Usage\r\nThe main window consists of a menu bar and two tabs\r\nthe first tabs is for Tiborcim source where as the second shows the generated MicroPython source\r\nThe menu-bar provide standard controls for managing file and options to flash the code\r\n\r\n## Language\r\n### Hello World\r\nThe Tiborcim\r\n```\r\nPRINT \"Hello, World!\"\r\n```\r\nrepresents the following MicroPython\r\n```\r\nfrom microbit import *\r\n\r\ndisplay.scroll(\"Hello, World!\")\r\n```\r\nno prizes for guessing what the Micro:Bit does...\r\n\r\n### Current Tiborcim statements\r\n#### PRINT\r\nEquivalent to display.scroll()\r\n```\r\nPRINT \"Some string\"\r\n```\r\n\r\n#### Flow\r\n##### IF .. ELSEIF .. ELSE .. END IF\r\nSimple logic\r\n```\r\nIF (1 < 10) THEN\r\nPRINT \"1 is less than 10\"\r\nELSEIF (2 < 5) THEN\r\nPRINT \"1 is not less then 10 but 2 is less than 5\"\r\nELSE\r\nPRINT \"You need to work on your Maths\"\r\nEND IF\r\n```\r\n##### WHILE .. WEND\r\nRepeat code while condition is true\r\n```\r\nx = 0\r\nWHILE x < 10\r\n\tx = x + 1\r\nWEND\r\n```\r\n#### Pixels\r\n##### SCREEN\r\nReturns the brightness of the pixel at x, y\r\n```\r\nPRINT SCREEN (x, y)\r\n```\r\n##### PSET\r\nSets the brightness of pixel x, y to z\r\n```\r\nPSET x, y, z\r\n```\r\n#### Buttons\r\n##### INKEY$\r\nreturns the current held button in the for of A, B or C with A & B representing their corresponding buttons while C is A+B simultaneously\r\nif nothing is pressed '' is returned\r\n```\r\nWHILE 1\r\n\tx = INKEY$\r\n\tIF x = 'A' THEN\r\n\t\tPRINT 'A'\r\n\tELSEIF x = 'B' THEN\r\n\t\tPRINT 'B'\r\n\tELSEIF x = 'C' THEN\r\n\t\tPRINT 'A+B'\r\n\tEND IF\r\nEND WHILE\r\n```\r\n#### Variables\r\nMost standard Python operations are available although ++ += -- -= are discouraged as they are not available in BASIC\r\nComparison operations are a little more complicated. Currently supported are = < >. >= => <> NOT() are planned\r\n##### STR$\r\nCasts a value to string\r\n```\r\na = 10\r\nb = STR$(a)\r\n' b is '10' not 10\r\n```\r\n\r\n##### INT\r\nCasts a value to integer\r\n```\r\na = 10.6789\r\nb = INT(a)\r\n' b is 10 not 10.6789\r\n```\r\n\r\n##### RND\r\nReturns a random number between 0 & 1\r\n```\r\ndice = INT(RND * 6 + 1)\r\n```\r\n\r\n##### SHAKEN\r\nTrue or False depending on whether or not the device was shaken since it was last called\r\n```\r\nWHILE 1\r\n\tIF SHAKEN THEN\r\n\t\ttimes = times + 1\r\n\t\tSHOW times\r\n\tEND IF\r\nWEND\r\n```\r\n\r\n##### RECEIVE$\r\nReturns the latest message received by the radio\r\n```\r\nIF RECEIVE$ = \"hi\" THEN\r\n\tPRINT \"hi\"\r\nEND IF\r\n```\r\n\r\n#### PYTHON .. END PYTHON\r\nallows the use of pure python code in a Tiborcim script\r\ne.g.:\r\n```\r\nPYTHON\r\na = 'hi'\r\na += ' again'\r\nEND PYTHON\r\n\r\nPRINT a\r\n```\r\n\r\n#### SUB .. END SUB\r\nCreate a subroutine. subroutines are like functions but do not return a value.\r\nSUBs \r\n```\r\nSUB test\r\n\tPRINT \"Hi\"\r\nEND SUB\r\n\r\ntest()\r\n```\r\n\r\n#### FOR .. NEXT\r\n\r\n// TODO: explain\r\n\r\n\r\n## What is it written in?\r\nThe 'compiler' and sample DE (I would say IDE but it isn't) are written in Python 3. I aim to be as Pythonic a possible.\r\n\r\n### Dependencies\r\nThe goal is to have a few dependencies as possible outside the package itself hence our current editor uses Tkinter although a GTK3 (PyGObject) environment is planned as an optional extra.\r\n\r\n## Why the name?\r\nWrite it backwards.\r\n\r\n### Seriously\r\nImaginative I know. Other name's were considered but just didn't feel right\r\n\r\n### How do you say that?!\r\n`Tib - or - kim` is how I say it aloud. I'm aware that is not how it's written but as the author i retain the right to be akward with my naming\r\n\r\n## Notes\r\nGitHub shows commits at weird times. unfortunately this occurred through a combination of a incorrectly set clock and a corrupted `.git` directory. long story short some commits show twice, some not at all & others at 1 o'clock in the morning for no apparent reason.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}